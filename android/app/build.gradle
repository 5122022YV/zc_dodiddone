buildscript {
    ext.kotlin_version = '2.0.20' // Replace with the latest version
    // ... rest of your buildscript block
}

plugins {
    id 'com.android.application'
    // START: FlutterFire Configuration
    //id "com.google.gms.google-services"
    id 'com.google.gms.google-services' version '4.4.2' apply false
    // END: FlutterFire Configuration
    //id 'kotlin-android'
    id 'org.jetbrains.kotlin.android' version '2.0.20' // Update this version
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}


dependencies {
  // Import the Firebase BoM
  implementation(platform("com.google.firebase:firebase-bom:33.1.2"))


  // TODO: Add the dependencies for Firebase products you want to use
  // When using the BoM, don't specify versions in Firebase dependencies
  implementation("com.google.firebase:firebase-analytics")


  // Add the dependencies for any other desired Firebase products
  // https://firebase.google.com/docs/android/setup#available-libraries
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

android {
    namespace = "com.example.zc_dodiddone"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.example.zc_dodiddone"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
        minSdkVersion 23
    }

    // buildTypes {
    //     release {
    //         // TODO: Add your own signing config for the release build.
    //         // Signing with the debug keys for now, so `flutter run --release` works.
    //         signingConfig = signingConfigs.debug
    //     }
    // } 
    signingConfigs {
        release {
            // Load keystore information from environment variables
            if (System.getenv("KEYSTORE_PASSWORD") != null && 
                System.getenv("KEY_PASSWORD") != null &&
                System.getenv("KEY_ALIAS") != null &&
                System.getenv("KEYSTORE_PATH") != null) {

                storeFile file(System.getenv("KEYSTORE_PATH"))
                storePassword System.getenv("KEYSTORE_PASSWORD")
                keyAlias System.getenv("KEY_ALIAS")
                keyPassword System.getenv("KEY_PASSWORD")
            } else {
                throw new GradleException("Keystore environment variables not set. Check your environment configuration.")
            }
        }
    }

    buildTypes {
        release {
            // Signing config for when you release your application
            //... signing configurations ...
            minifyEnabled true // Enables code shrinking 
            shrinkResources true // Enables resource shrinking
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release // Apply the signing config
        }
    }

}

flutter {
    source = "../.."
}
